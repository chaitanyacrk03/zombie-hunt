{"version":3,"sources":["component/cards/card.component.jsx","component/cardlist/cardlist.component.jsx","component/searchbox/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","idvalue","name","email","CardList","monster","filter","m","toLowerCase","includes","searchmonster","map","value","id","SearchBox","placevalue","handle","type","placeholder","onChange","App","handlechange","e","setState","searchmonsters","target","state","fetch","then","response","json","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAGaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAhC,4BACvB,mCAAOJ,EAAMK,QACb,mCAAML,EAAMM,aCJPC,EAAW,SAACP,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,QAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEL,KAAKM,cAAcC,SAASZ,EAAMa,cAAcF,kBAAgBG,KAAI,SAAAC,GAAK,OAAI,cAAC,EAAD,CAAqBX,QAASW,EAAMC,GAAIX,KAAMU,EAAMV,KAAMC,MAAOS,EAAMT,OAA5DS,EAAMC,UCFtHC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,OAAf,OACrB,uBAAOlB,UAAU,gBAAgBmB,KAAK,SAClCC,YAAaH,EACbI,SAAUH,MCuBHI,E,kDAxBb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,eAAgBF,EAAEG,OAAOb,SAPzC,EAAKc,MAAQ,CACXrB,QAAS,GAETmB,eAAgB,IALN,E,qDAWd,WAAqB,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3EF,MAAK,SAAAhB,GAAK,OAAI,EAAKW,SAAS,CAAElB,QAASO,S,oBAG5C,WACE,OAAO,sBAAKd,UAAU,MAAf,UACL,+CACA,cAAC,EAAD,CAAWiB,WAAW,kBAAkBC,OAAQe,KAAKV,eACrD,cAAC,EAAD,CAAUX,cAAeqB,KAAKL,MAAMF,eAAgBnB,QAAS0B,KAAKL,MAAMrB,iB,GArB5D2B,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d0855ed5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './cards.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return <div className=\"card-container\">\r\n        <img alt=\"monsters\" src={`https://robohash.org/${props.idvalue}?set=set2&size=180x180`} ></img>\r\n        <h2 > {props.name}</h2>\r\n        <h2> {props.email}</h2>\r\n    </div>\r\n}","import React from 'react';\r\nimport './cardlist.styles.css';\r\nimport { Card } from '../cards/card.component.jsx';\r\nexport const CardList = (props) =>\r\n    <div className=\"card-list\">\r\n        {props.monster.filter(m => m.name.toLowerCase().includes(props.searchmonster.toLowerCase())).map(value => <Card key={value.id} idvalue={value.id} name={value.name} email={value.email} />)}\r\n    </div>","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placevalue, handle }) =>\r\n    <input className=\"searchelement\" type=\"search\"\r\n        placeholder={placevalue}\r\n        onChange={handle}\r\n    ></input>","import './App.css';\nimport React, { Component } from 'react';\nimport { CardList } from './component/cardlist/cardlist.component';\nimport { SearchBox } from './component/searchbox/search-box.jsx';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monster: [\n      ],\n      searchmonsters: \"\"\n    }\n  }\n  handlechange = (e) => {\n    this.setState({ searchmonsters: e.target.value })\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json())\n      .then(value => this.setState({ monster: value }));\n  };\n\n  render() {\n    return <div className=\"App\">\n      <h1> MONSTER HUNT</h1>\n      <SearchBox placevalue=\"search monsters\" handle={this.handlechange} />\n      <CardList searchmonster={this.state.searchmonsters} monster={this.state.monster} />\n    </div >\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}